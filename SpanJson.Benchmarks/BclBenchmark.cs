using System;
using BenchmarkDotNet.Attributes;
using SpanJson.Benchmarks.Serializers;
using SpanJson.Shared.Fixture;
namespace SpanJson.Benchmarks
{
  // Autogenerated
  // ReSharper disable BuiltInTypeReferenceStyle
  [Config(typeof(MyConfig))]
  public class BclBenchmark
  {
    private static readonly ExpressionTreeFixture ExpressionTreeFixture = new();
    private static readonly JilSerializer JilSerializer = new();
    private static readonly SpanJsonSerializer SpanJsonSerializer = new();
    private static readonly SpanJsonUtf8Serializer SpanJsonUtf8Serializer = new();
    private static readonly Utf8JsonSerializer Utf8JsonSerializer = new();
    private static readonly sbyte SByteInput = ExpressionTreeFixture.Create<sbyte>();
    private static readonly short Int16Input = ExpressionTreeFixture.Create<short>();
    private static readonly int Int32Input = ExpressionTreeFixture.Create<int>();
    private static readonly long Int64Input = ExpressionTreeFixture.Create<long>();
    private static readonly byte ByteInput = ExpressionTreeFixture.Create<byte>();
    private static readonly ushort UInt16Input = ExpressionTreeFixture.Create<ushort>();
    private static readonly uint UInt32Input = ExpressionTreeFixture.Create<uint>();
    private static readonly ulong UInt64Input = ExpressionTreeFixture.Create<ulong>();
    private static readonly float SingleInput = ExpressionTreeFixture.Create<float>();
    private static readonly double DoubleInput = ExpressionTreeFixture.Create<double>();
    private static readonly bool BooleanInput = ExpressionTreeFixture.Create<bool>();
    private static readonly char CharInput = ExpressionTreeFixture.Create<char>();
    private static readonly DateTime DateTimeInput = ExpressionTreeFixture.Create<DateTime>();
    private static readonly DateTimeOffset DateTimeOffsetInput = ExpressionTreeFixture.Create<DateTimeOffset>();
    private static readonly TimeSpan TimeSpanInput = ExpressionTreeFixture.Create<TimeSpan>();
    private static readonly DateOnly DateOnlyInput = ExpressionTreeFixture.Create<DateOnly>();
    private static readonly TimeOnly TimeOnlyInput = ExpressionTreeFixture.Create<TimeOnly>();
    private static readonly Guid GuidInput = ExpressionTreeFixture.Create<Guid>();
    private static readonly string StringInput = ExpressionTreeFixture.Create<string>();
    private static readonly decimal DecimalInput = ExpressionTreeFixture.Create<decimal>();
    private static readonly Version VersionInput = ExpressionTreeFixture.Create<Version>();
    private static readonly Uri UriInput = ExpressionTreeFixture.Create<Uri>();

    [Benchmark]
    public string SerializeSByteWithJilSerializer()
    {
        return JilSerializer.Serialize(SByteInput);
    }

    [Benchmark]
    public string SerializeSByteWithSpanJsonSerializer()
    {
        return SpanJsonSerializer.Serialize(SByteInput);
    }

    [Benchmark]
    public byte[] SerializeSByteWithSpanJsonUtf8Serializer()
    {
        return SpanJsonUtf8Serializer.Serialize(SByteInput);
    }

    [Benchmark]
    public byte[] SerializeSByteWithUtf8JsonSerializer()
    {
        return Utf8JsonSerializer.Serialize(SByteInput);
    }

    [Benchmark]
    public string SerializeInt16WithJilSerializer()
    {
        return JilSerializer.Serialize(Int16Input);
    }

    [Benchmark]
    public string SerializeInt16WithSpanJsonSerializer()
    {
        return SpanJsonSerializer.Serialize(Int16Input);
    }

    [Benchmark]
    public byte[] SerializeInt16WithSpanJsonUtf8Serializer()
    {
        return SpanJsonUtf8Serializer.Serialize(Int16Input);
    }

    [Benchmark]
    public byte[] SerializeInt16WithUtf8JsonSerializer()
    {
        return Utf8JsonSerializer.Serialize(Int16Input);
    }

    [Benchmark]
    public string SerializeInt32WithJilSerializer()
    {
        return JilSerializer.Serialize(Int32Input);
    }

    [Benchmark]
    public string SerializeInt32WithSpanJsonSerializer()
    {
        return SpanJsonSerializer.Serialize(Int32Input);
    }

    [Benchmark]
    public byte[] SerializeInt32WithSpanJsonUtf8Serializer()
    {
        return SpanJsonUtf8Serializer.Serialize(Int32Input);
    }

    [Benchmark]
    public byte[] SerializeInt32WithUtf8JsonSerializer()
    {
        return Utf8JsonSerializer.Serialize(Int32Input);
    }

    [Benchmark]
    public string SerializeInt64WithJilSerializer()
    {
        return JilSerializer.Serialize(Int64Input);
    }

    [Benchmark]
    public string SerializeInt64WithSpanJsonSerializer()
    {
        return SpanJsonSerializer.Serialize(Int64Input);
    }

    [Benchmark]
    public byte[] SerializeInt64WithSpanJsonUtf8Serializer()
    {
        return SpanJsonUtf8Serializer.Serialize(Int64Input);
    }

    [Benchmark]
    public byte[] SerializeInt64WithUtf8JsonSerializer()
    {
        return Utf8JsonSerializer.Serialize(Int64Input);
    }

    [Benchmark]
    public string SerializeByteWithJilSerializer()
    {
        return JilSerializer.Serialize(ByteInput);
    }

    [Benchmark]
    public string SerializeByteWithSpanJsonSerializer()
    {
        return SpanJsonSerializer.Serialize(ByteInput);
    }

    [Benchmark]
    public byte[] SerializeByteWithSpanJsonUtf8Serializer()
    {
        return SpanJsonUtf8Serializer.Serialize(ByteInput);
    }

    [Benchmark]
    public byte[] SerializeByteWithUtf8JsonSerializer()
    {
        return Utf8JsonSerializer.Serialize(ByteInput);
    }

    [Benchmark]
    public string SerializeUInt16WithJilSerializer()
    {
        return JilSerializer.Serialize(UInt16Input);
    }

    [Benchmark]
    public string SerializeUInt16WithSpanJsonSerializer()
    {
        return SpanJsonSerializer.Serialize(UInt16Input);
    }

    [Benchmark]
    public byte[] SerializeUInt16WithSpanJsonUtf8Serializer()
    {
        return SpanJsonUtf8Serializer.Serialize(UInt16Input);
    }

    [Benchmark]
    public byte[] SerializeUInt16WithUtf8JsonSerializer()
    {
        return Utf8JsonSerializer.Serialize(UInt16Input);
    }

    [Benchmark]
    public string SerializeUInt32WithJilSerializer()
    {
        return JilSerializer.Serialize(UInt32Input);
    }

    [Benchmark]
    public string SerializeUInt32WithSpanJsonSerializer()
    {
        return SpanJsonSerializer.Serialize(UInt32Input);
    }

    [Benchmark]
    public byte[] SerializeUInt32WithSpanJsonUtf8Serializer()
    {
        return SpanJsonUtf8Serializer.Serialize(UInt32Input);
    }

    [Benchmark]
    public byte[] SerializeUInt32WithUtf8JsonSerializer()
    {
        return Utf8JsonSerializer.Serialize(UInt32Input);
    }

    [Benchmark]
    public string SerializeUInt64WithJilSerializer()
    {
        return JilSerializer.Serialize(UInt64Input);
    }

    [Benchmark]
    public string SerializeUInt64WithSpanJsonSerializer()
    {
        return SpanJsonSerializer.Serialize(UInt64Input);
    }

    [Benchmark]
    public byte[] SerializeUInt64WithSpanJsonUtf8Serializer()
    {
        return SpanJsonUtf8Serializer.Serialize(UInt64Input);
    }

    [Benchmark]
    public byte[] SerializeUInt64WithUtf8JsonSerializer()
    {
        return Utf8JsonSerializer.Serialize(UInt64Input);
    }

    [Benchmark]
    public string SerializeSingleWithJilSerializer()
    {
        return JilSerializer.Serialize(SingleInput);
    }

    [Benchmark]
    public string SerializeSingleWithSpanJsonSerializer()
    {
        return SpanJsonSerializer.Serialize(SingleInput);
    }

    [Benchmark]
    public byte[] SerializeSingleWithSpanJsonUtf8Serializer()
    {
        return SpanJsonUtf8Serializer.Serialize(SingleInput);
    }

    [Benchmark]
    public byte[] SerializeSingleWithUtf8JsonSerializer()
    {
        return Utf8JsonSerializer.Serialize(SingleInput);
    }

    [Benchmark]
    public string SerializeDoubleWithJilSerializer()
    {
        return JilSerializer.Serialize(DoubleInput);
    }

    [Benchmark]
    public string SerializeDoubleWithSpanJsonSerializer()
    {
        return SpanJsonSerializer.Serialize(DoubleInput);
    }

    [Benchmark]
    public byte[] SerializeDoubleWithSpanJsonUtf8Serializer()
    {
        return SpanJsonUtf8Serializer.Serialize(DoubleInput);
    }

    [Benchmark]
    public byte[] SerializeDoubleWithUtf8JsonSerializer()
    {
        return Utf8JsonSerializer.Serialize(DoubleInput);
    }

    [Benchmark]
    public string SerializeBooleanWithJilSerializer()
    {
        return JilSerializer.Serialize(BooleanInput);
    }

    [Benchmark]
    public string SerializeBooleanWithSpanJsonSerializer()
    {
        return SpanJsonSerializer.Serialize(BooleanInput);
    }

    [Benchmark]
    public byte[] SerializeBooleanWithSpanJsonUtf8Serializer()
    {
        return SpanJsonUtf8Serializer.Serialize(BooleanInput);
    }

    [Benchmark]
    public byte[] SerializeBooleanWithUtf8JsonSerializer()
    {
        return Utf8JsonSerializer.Serialize(BooleanInput);
    }

    [Benchmark]
    public string SerializeCharWithJilSerializer()
    {
        return JilSerializer.Serialize(CharInput);
    }

    [Benchmark]
    public string SerializeCharWithSpanJsonSerializer()
    {
        return SpanJsonSerializer.Serialize(CharInput);
    }

    [Benchmark]
    public byte[] SerializeCharWithSpanJsonUtf8Serializer()
    {
        return SpanJsonUtf8Serializer.Serialize(CharInput);
    }

    [Benchmark]
    public byte[] SerializeCharWithUtf8JsonSerializer()
    {
        return Utf8JsonSerializer.Serialize(CharInput);
    }

    [Benchmark]
    public string SerializeDateTimeWithJilSerializer()
    {
        return JilSerializer.Serialize(DateTimeInput);
    }

    [Benchmark]
    public string SerializeDateTimeWithSpanJsonSerializer()
    {
        return SpanJsonSerializer.Serialize(DateTimeInput);
    }

    [Benchmark]
    public byte[] SerializeDateTimeWithSpanJsonUtf8Serializer()
    {
        return SpanJsonUtf8Serializer.Serialize(DateTimeInput);
    }

    [Benchmark]
    public byte[] SerializeDateTimeWithUtf8JsonSerializer()
    {
        return Utf8JsonSerializer.Serialize(DateTimeInput);
    }

    [Benchmark]
    public string SerializeDateTimeOffsetWithJilSerializer()
    {
        return JilSerializer.Serialize(DateTimeOffsetInput);
    }

    [Benchmark]
    public string SerializeDateTimeOffsetWithSpanJsonSerializer()
    {
        return SpanJsonSerializer.Serialize(DateTimeOffsetInput);
    }

    [Benchmark]
    public byte[] SerializeDateTimeOffsetWithSpanJsonUtf8Serializer()
    {
        return SpanJsonUtf8Serializer.Serialize(DateTimeOffsetInput);
    }

    [Benchmark]
    public byte[] SerializeDateTimeOffsetWithUtf8JsonSerializer()
    {
        return Utf8JsonSerializer.Serialize(DateTimeOffsetInput);
    }

    [Benchmark]
    public string SerializeTimeSpanWithJilSerializer()
    {
        return JilSerializer.Serialize(TimeSpanInput);
    }

    [Benchmark]
    public string SerializeTimeSpanWithSpanJsonSerializer()
    {
        return SpanJsonSerializer.Serialize(TimeSpanInput);
    }

    [Benchmark]
    public byte[] SerializeTimeSpanWithSpanJsonUtf8Serializer()
    {
        return SpanJsonUtf8Serializer.Serialize(TimeSpanInput);
    }

    [Benchmark]
    public byte[] SerializeTimeSpanWithUtf8JsonSerializer()
    {
        return Utf8JsonSerializer.Serialize(TimeSpanInput);
    }

    [Benchmark]
    public string SerializeDateOnlyWithJilSerializer()
    {
        return JilSerializer.Serialize(DateOnlyInput);
    }

    [Benchmark]
    public string SerializeDateOnlyWithSpanJsonSerializer()
    {
        return SpanJsonSerializer.Serialize(DateOnlyInput);
    }

    [Benchmark]
    public byte[] SerializeDateOnlyWithSpanJsonUtf8Serializer()
    {
        return SpanJsonUtf8Serializer.Serialize(DateOnlyInput);
    }

    [Benchmark]
    public byte[] SerializeDateOnlyWithUtf8JsonSerializer()
    {
        return Utf8JsonSerializer.Serialize(DateOnlyInput);
    }

    [Benchmark]
    public string SerializeTimeOnlyWithJilSerializer()
    {
        return JilSerializer.Serialize(TimeOnlyInput);
    }

    [Benchmark]
    public string SerializeTimeOnlyWithSpanJsonSerializer()
    {
        return SpanJsonSerializer.Serialize(TimeOnlyInput);
    }

    [Benchmark]
    public byte[] SerializeTimeOnlyWithSpanJsonUtf8Serializer()
    {
        return SpanJsonUtf8Serializer.Serialize(TimeOnlyInput);
    }

    [Benchmark]
    public byte[] SerializeTimeOnlyWithUtf8JsonSerializer()
    {
        return Utf8JsonSerializer.Serialize(TimeOnlyInput);
    }

    [Benchmark]
    public string SerializeGuidWithJilSerializer()
    {
        return JilSerializer.Serialize(GuidInput);
    }

    [Benchmark]
    public string SerializeGuidWithSpanJsonSerializer()
    {
        return SpanJsonSerializer.Serialize(GuidInput);
    }

    [Benchmark]
    public byte[] SerializeGuidWithSpanJsonUtf8Serializer()
    {
        return SpanJsonUtf8Serializer.Serialize(GuidInput);
    }

    [Benchmark]
    public byte[] SerializeGuidWithUtf8JsonSerializer()
    {
        return Utf8JsonSerializer.Serialize(GuidInput);
    }

    [Benchmark]
    public string SerializeStringWithJilSerializer()
    {
        return JilSerializer.Serialize(StringInput);
    }

    [Benchmark]
    public string SerializeStringWithSpanJsonSerializer()
    {
        return SpanJsonSerializer.Serialize(StringInput);
    }

    [Benchmark]
    public byte[] SerializeStringWithSpanJsonUtf8Serializer()
    {
        return SpanJsonUtf8Serializer.Serialize(StringInput);
    }

    [Benchmark]
    public byte[] SerializeStringWithUtf8JsonSerializer()
    {
        return Utf8JsonSerializer.Serialize(StringInput);
    }

    [Benchmark]
    public string SerializeDecimalWithJilSerializer()
    {
        return JilSerializer.Serialize(DecimalInput);
    }

    [Benchmark]
    public string SerializeDecimalWithSpanJsonSerializer()
    {
        return SpanJsonSerializer.Serialize(DecimalInput);
    }

    [Benchmark]
    public byte[] SerializeDecimalWithSpanJsonUtf8Serializer()
    {
        return SpanJsonUtf8Serializer.Serialize(DecimalInput);
    }

    [Benchmark]
    public byte[] SerializeDecimalWithUtf8JsonSerializer()
    {
        return Utf8JsonSerializer.Serialize(DecimalInput);
    }

    [Benchmark]
    public string SerializeVersionWithJilSerializer()
    {
        return JilSerializer.Serialize(VersionInput);
    }

    [Benchmark]
    public string SerializeVersionWithSpanJsonSerializer()
    {
        return SpanJsonSerializer.Serialize(VersionInput);
    }

    [Benchmark]
    public byte[] SerializeVersionWithSpanJsonUtf8Serializer()
    {
        return SpanJsonUtf8Serializer.Serialize(VersionInput);
    }

    [Benchmark]
    public byte[] SerializeVersionWithUtf8JsonSerializer()
    {
        return Utf8JsonSerializer.Serialize(VersionInput);
    }

    [Benchmark]
    public string SerializeUriWithJilSerializer()
    {
        return JilSerializer.Serialize(UriInput);
    }

    [Benchmark]
    public string SerializeUriWithSpanJsonSerializer()
    {
        return SpanJsonSerializer.Serialize(UriInput);
    }

    [Benchmark]
    public byte[] SerializeUriWithSpanJsonUtf8Serializer()
    {
        return SpanJsonUtf8Serializer.Serialize(UriInput);
    }

    [Benchmark]
    public byte[] SerializeUriWithUtf8JsonSerializer()
    {
        return Utf8JsonSerializer.Serialize(UriInput);
    }
    private static readonly string SByteOutputOfJilSerializer = JilSerializer.Serialize(SByteInput);
    [Benchmark]
    public sbyte DeserializeSByteWithJilSerializer()
    {
        return JilSerializer.Deserialize<sbyte>(SByteOutputOfJilSerializer);
    }
    private static readonly string SByteOutputOfSpanJsonSerializer = SpanJsonSerializer.Serialize(SByteInput);
    [Benchmark]
    public sbyte DeserializeSByteWithSpanJsonSerializer()
    {
        return SpanJsonSerializer.Deserialize<sbyte>(SByteOutputOfSpanJsonSerializer);
    }
    private static readonly byte[] SByteOutputOfSpanJsonUtf8Serializer = SpanJsonUtf8Serializer.Serialize(SByteInput);
    [Benchmark]
    public sbyte DeserializeSByteWithSpanJsonUtf8Serializer()
    {
        return SpanJsonUtf8Serializer.Deserialize<sbyte>(SByteOutputOfSpanJsonUtf8Serializer);
    }
    private static readonly byte[] SByteOutputOfUtf8JsonSerializer = Utf8JsonSerializer.Serialize(SByteInput);
    [Benchmark]
    public sbyte DeserializeSByteWithUtf8JsonSerializer()
    {
        return Utf8JsonSerializer.Deserialize<sbyte>(SByteOutputOfUtf8JsonSerializer);
    }
    private static readonly string Int16OutputOfJilSerializer = JilSerializer.Serialize(Int16Input);
    [Benchmark]
    public short DeserializeInt16WithJilSerializer()
    {
        return JilSerializer.Deserialize<short>(Int16OutputOfJilSerializer);
    }
    private static readonly string Int16OutputOfSpanJsonSerializer = SpanJsonSerializer.Serialize(Int16Input);
    [Benchmark]
    public short DeserializeInt16WithSpanJsonSerializer()
    {
        return SpanJsonSerializer.Deserialize<short>(Int16OutputOfSpanJsonSerializer);
    }
    private static readonly byte[] Int16OutputOfSpanJsonUtf8Serializer = SpanJsonUtf8Serializer.Serialize(Int16Input);
    [Benchmark]
    public short DeserializeInt16WithSpanJsonUtf8Serializer()
    {
        return SpanJsonUtf8Serializer.Deserialize<short>(Int16OutputOfSpanJsonUtf8Serializer);
    }
    private static readonly byte[] Int16OutputOfUtf8JsonSerializer = Utf8JsonSerializer.Serialize(Int16Input);
    [Benchmark]
    public short DeserializeInt16WithUtf8JsonSerializer()
    {
        return Utf8JsonSerializer.Deserialize<short>(Int16OutputOfUtf8JsonSerializer);
    }
    private static readonly string Int32OutputOfJilSerializer = JilSerializer.Serialize(Int32Input);
    [Benchmark]
    public int DeserializeInt32WithJilSerializer()
    {
        return JilSerializer.Deserialize<int>(Int32OutputOfJilSerializer);
    }
    private static readonly string Int32OutputOfSpanJsonSerializer = SpanJsonSerializer.Serialize(Int32Input);
    [Benchmark]
    public int DeserializeInt32WithSpanJsonSerializer()
    {
        return SpanJsonSerializer.Deserialize<int>(Int32OutputOfSpanJsonSerializer);
    }
    private static readonly byte[] Int32OutputOfSpanJsonUtf8Serializer = SpanJsonUtf8Serializer.Serialize(Int32Input);
    [Benchmark]
    public int DeserializeInt32WithSpanJsonUtf8Serializer()
    {
        return SpanJsonUtf8Serializer.Deserialize<int>(Int32OutputOfSpanJsonUtf8Serializer);
    }
    private static readonly byte[] Int32OutputOfUtf8JsonSerializer = Utf8JsonSerializer.Serialize(Int32Input);
    [Benchmark]
    public int DeserializeInt32WithUtf8JsonSerializer()
    {
        return Utf8JsonSerializer.Deserialize<int>(Int32OutputOfUtf8JsonSerializer);
    }
    private static readonly string Int64OutputOfJilSerializer = JilSerializer.Serialize(Int64Input);
    [Benchmark]
    public long DeserializeInt64WithJilSerializer()
    {
        return JilSerializer.Deserialize<long>(Int64OutputOfJilSerializer);
    }
    private static readonly string Int64OutputOfSpanJsonSerializer = SpanJsonSerializer.Serialize(Int64Input);
    [Benchmark]
    public long DeserializeInt64WithSpanJsonSerializer()
    {
        return SpanJsonSerializer.Deserialize<long>(Int64OutputOfSpanJsonSerializer);
    }
    private static readonly byte[] Int64OutputOfSpanJsonUtf8Serializer = SpanJsonUtf8Serializer.Serialize(Int64Input);
    [Benchmark]
    public long DeserializeInt64WithSpanJsonUtf8Serializer()
    {
        return SpanJsonUtf8Serializer.Deserialize<long>(Int64OutputOfSpanJsonUtf8Serializer);
    }
    private static readonly byte[] Int64OutputOfUtf8JsonSerializer = Utf8JsonSerializer.Serialize(Int64Input);
    [Benchmark]
    public long DeserializeInt64WithUtf8JsonSerializer()
    {
        return Utf8JsonSerializer.Deserialize<long>(Int64OutputOfUtf8JsonSerializer);
    }
    private static readonly string ByteOutputOfJilSerializer = JilSerializer.Serialize(ByteInput);
    [Benchmark]
    public byte DeserializeByteWithJilSerializer()
    {
        return JilSerializer.Deserialize<byte>(ByteOutputOfJilSerializer);
    }
    private static readonly string ByteOutputOfSpanJsonSerializer = SpanJsonSerializer.Serialize(ByteInput);
    [Benchmark]
    public byte DeserializeByteWithSpanJsonSerializer()
    {
        return SpanJsonSerializer.Deserialize<byte>(ByteOutputOfSpanJsonSerializer);
    }
    private static readonly byte[] ByteOutputOfSpanJsonUtf8Serializer = SpanJsonUtf8Serializer.Serialize(ByteInput);
    [Benchmark]
    public byte DeserializeByteWithSpanJsonUtf8Serializer()
    {
        return SpanJsonUtf8Serializer.Deserialize<byte>(ByteOutputOfSpanJsonUtf8Serializer);
    }
    private static readonly byte[] ByteOutputOfUtf8JsonSerializer = Utf8JsonSerializer.Serialize(ByteInput);
    [Benchmark]
    public byte DeserializeByteWithUtf8JsonSerializer()
    {
        return Utf8JsonSerializer.Deserialize<byte>(ByteOutputOfUtf8JsonSerializer);
    }
    private static readonly string UInt16OutputOfJilSerializer = JilSerializer.Serialize(UInt16Input);
    [Benchmark]
    public ushort DeserializeUInt16WithJilSerializer()
    {
        return JilSerializer.Deserialize<ushort>(UInt16OutputOfJilSerializer);
    }
    private static readonly string UInt16OutputOfSpanJsonSerializer = SpanJsonSerializer.Serialize(UInt16Input);
    [Benchmark]
    public ushort DeserializeUInt16WithSpanJsonSerializer()
    {
        return SpanJsonSerializer.Deserialize<ushort>(UInt16OutputOfSpanJsonSerializer);
    }
    private static readonly byte[] UInt16OutputOfSpanJsonUtf8Serializer = SpanJsonUtf8Serializer.Serialize(UInt16Input);
    [Benchmark]
    public ushort DeserializeUInt16WithSpanJsonUtf8Serializer()
    {
        return SpanJsonUtf8Serializer.Deserialize<ushort>(UInt16OutputOfSpanJsonUtf8Serializer);
    }
    private static readonly byte[] UInt16OutputOfUtf8JsonSerializer = Utf8JsonSerializer.Serialize(UInt16Input);
    [Benchmark]
    public ushort DeserializeUInt16WithUtf8JsonSerializer()
    {
        return Utf8JsonSerializer.Deserialize<ushort>(UInt16OutputOfUtf8JsonSerializer);
    }
    private static readonly string UInt32OutputOfJilSerializer = JilSerializer.Serialize(UInt32Input);
    [Benchmark]
    public uint DeserializeUInt32WithJilSerializer()
    {
        return JilSerializer.Deserialize<uint>(UInt32OutputOfJilSerializer);
    }
    private static readonly string UInt32OutputOfSpanJsonSerializer = SpanJsonSerializer.Serialize(UInt32Input);
    [Benchmark]
    public uint DeserializeUInt32WithSpanJsonSerializer()
    {
        return SpanJsonSerializer.Deserialize<uint>(UInt32OutputOfSpanJsonSerializer);
    }
    private static readonly byte[] UInt32OutputOfSpanJsonUtf8Serializer = SpanJsonUtf8Serializer.Serialize(UInt32Input);
    [Benchmark]
    public uint DeserializeUInt32WithSpanJsonUtf8Serializer()
    {
        return SpanJsonUtf8Serializer.Deserialize<uint>(UInt32OutputOfSpanJsonUtf8Serializer);
    }
    private static readonly byte[] UInt32OutputOfUtf8JsonSerializer = Utf8JsonSerializer.Serialize(UInt32Input);
    [Benchmark]
    public uint DeserializeUInt32WithUtf8JsonSerializer()
    {
        return Utf8JsonSerializer.Deserialize<uint>(UInt32OutputOfUtf8JsonSerializer);
    }
    private static readonly string UInt64OutputOfJilSerializer = JilSerializer.Serialize(UInt64Input);
    [Benchmark]
    public ulong DeserializeUInt64WithJilSerializer()
    {
        return JilSerializer.Deserialize<ulong>(UInt64OutputOfJilSerializer);
    }
    private static readonly string UInt64OutputOfSpanJsonSerializer = SpanJsonSerializer.Serialize(UInt64Input);
    [Benchmark]
    public ulong DeserializeUInt64WithSpanJsonSerializer()
    {
        return SpanJsonSerializer.Deserialize<ulong>(UInt64OutputOfSpanJsonSerializer);
    }
    private static readonly byte[] UInt64OutputOfSpanJsonUtf8Serializer = SpanJsonUtf8Serializer.Serialize(UInt64Input);
    [Benchmark]
    public ulong DeserializeUInt64WithSpanJsonUtf8Serializer()
    {
        return SpanJsonUtf8Serializer.Deserialize<ulong>(UInt64OutputOfSpanJsonUtf8Serializer);
    }
    private static readonly byte[] UInt64OutputOfUtf8JsonSerializer = Utf8JsonSerializer.Serialize(UInt64Input);
    [Benchmark]
    public ulong DeserializeUInt64WithUtf8JsonSerializer()
    {
        return Utf8JsonSerializer.Deserialize<ulong>(UInt64OutputOfUtf8JsonSerializer);
    }
    private static readonly string SingleOutputOfJilSerializer = JilSerializer.Serialize(SingleInput);
    [Benchmark]
    public float DeserializeSingleWithJilSerializer()
    {
        return JilSerializer.Deserialize<float>(SingleOutputOfJilSerializer);
    }
    private static readonly string SingleOutputOfSpanJsonSerializer = SpanJsonSerializer.Serialize(SingleInput);
    [Benchmark]
    public float DeserializeSingleWithSpanJsonSerializer()
    {
        return SpanJsonSerializer.Deserialize<float>(SingleOutputOfSpanJsonSerializer);
    }
    private static readonly byte[] SingleOutputOfSpanJsonUtf8Serializer = SpanJsonUtf8Serializer.Serialize(SingleInput);
    [Benchmark]
    public float DeserializeSingleWithSpanJsonUtf8Serializer()
    {
        return SpanJsonUtf8Serializer.Deserialize<float>(SingleOutputOfSpanJsonUtf8Serializer);
    }
    private static readonly byte[] SingleOutputOfUtf8JsonSerializer = Utf8JsonSerializer.Serialize(SingleInput);
    [Benchmark]
    public float DeserializeSingleWithUtf8JsonSerializer()
    {
        return Utf8JsonSerializer.Deserialize<float>(SingleOutputOfUtf8JsonSerializer);
    }
    private static readonly string DoubleOutputOfJilSerializer = JilSerializer.Serialize(DoubleInput);
    [Benchmark]
    public double DeserializeDoubleWithJilSerializer()
    {
        return JilSerializer.Deserialize<double>(DoubleOutputOfJilSerializer);
    }
    private static readonly string DoubleOutputOfSpanJsonSerializer = SpanJsonSerializer.Serialize(DoubleInput);
    [Benchmark]
    public double DeserializeDoubleWithSpanJsonSerializer()
    {
        return SpanJsonSerializer.Deserialize<double>(DoubleOutputOfSpanJsonSerializer);
    }
    private static readonly byte[] DoubleOutputOfSpanJsonUtf8Serializer = SpanJsonUtf8Serializer.Serialize(DoubleInput);
    [Benchmark]
    public double DeserializeDoubleWithSpanJsonUtf8Serializer()
    {
        return SpanJsonUtf8Serializer.Deserialize<double>(DoubleOutputOfSpanJsonUtf8Serializer);
    }
    private static readonly byte[] DoubleOutputOfUtf8JsonSerializer = Utf8JsonSerializer.Serialize(DoubleInput);
    [Benchmark]
    public double DeserializeDoubleWithUtf8JsonSerializer()
    {
        return Utf8JsonSerializer.Deserialize<double>(DoubleOutputOfUtf8JsonSerializer);
    }
    private static readonly string BooleanOutputOfJilSerializer = JilSerializer.Serialize(BooleanInput);
    [Benchmark]
    public bool DeserializeBooleanWithJilSerializer()
    {
        return JilSerializer.Deserialize<bool>(BooleanOutputOfJilSerializer);
    }
    private static readonly string BooleanOutputOfSpanJsonSerializer = SpanJsonSerializer.Serialize(BooleanInput);
    [Benchmark]
    public bool DeserializeBooleanWithSpanJsonSerializer()
    {
        return SpanJsonSerializer.Deserialize<bool>(BooleanOutputOfSpanJsonSerializer);
    }
    private static readonly byte[] BooleanOutputOfSpanJsonUtf8Serializer = SpanJsonUtf8Serializer.Serialize(BooleanInput);
    [Benchmark]
    public bool DeserializeBooleanWithSpanJsonUtf8Serializer()
    {
        return SpanJsonUtf8Serializer.Deserialize<bool>(BooleanOutputOfSpanJsonUtf8Serializer);
    }
    private static readonly byte[] BooleanOutputOfUtf8JsonSerializer = Utf8JsonSerializer.Serialize(BooleanInput);
    [Benchmark]
    public bool DeserializeBooleanWithUtf8JsonSerializer()
    {
        return Utf8JsonSerializer.Deserialize<bool>(BooleanOutputOfUtf8JsonSerializer);
    }
    private static readonly string CharOutputOfJilSerializer = JilSerializer.Serialize(CharInput);
    [Benchmark]
    public char DeserializeCharWithJilSerializer()
    {
        return JilSerializer.Deserialize<char>(CharOutputOfJilSerializer);
    }
    private static readonly string CharOutputOfSpanJsonSerializer = SpanJsonSerializer.Serialize(CharInput);
    [Benchmark]
    public char DeserializeCharWithSpanJsonSerializer()
    {
        return SpanJsonSerializer.Deserialize<char>(CharOutputOfSpanJsonSerializer);
    }
    private static readonly byte[] CharOutputOfSpanJsonUtf8Serializer = SpanJsonUtf8Serializer.Serialize(CharInput);
    [Benchmark]
    public char DeserializeCharWithSpanJsonUtf8Serializer()
    {
        return SpanJsonUtf8Serializer.Deserialize<char>(CharOutputOfSpanJsonUtf8Serializer);
    }
    private static readonly byte[] CharOutputOfUtf8JsonSerializer = Utf8JsonSerializer.Serialize(CharInput);
    [Benchmark]
    public char DeserializeCharWithUtf8JsonSerializer()
    {
        return Utf8JsonSerializer.Deserialize<char>(CharOutputOfUtf8JsonSerializer);
    }
    private static readonly string DateTimeOutputOfJilSerializer = JilSerializer.Serialize(DateTimeInput);
    [Benchmark]
    public DateTime DeserializeDateTimeWithJilSerializer()
    {
        return JilSerializer.Deserialize<DateTime>(DateTimeOutputOfJilSerializer);
    }
    private static readonly string DateTimeOutputOfSpanJsonSerializer = SpanJsonSerializer.Serialize(DateTimeInput);
    [Benchmark]
    public DateTime DeserializeDateTimeWithSpanJsonSerializer()
    {
        return SpanJsonSerializer.Deserialize<DateTime>(DateTimeOutputOfSpanJsonSerializer);
    }
    private static readonly byte[] DateTimeOutputOfSpanJsonUtf8Serializer = SpanJsonUtf8Serializer.Serialize(DateTimeInput);
    [Benchmark]
    public DateTime DeserializeDateTimeWithSpanJsonUtf8Serializer()
    {
        return SpanJsonUtf8Serializer.Deserialize<DateTime>(DateTimeOutputOfSpanJsonUtf8Serializer);
    }
    private static readonly byte[] DateTimeOutputOfUtf8JsonSerializer = Utf8JsonSerializer.Serialize(DateTimeInput);
    [Benchmark]
    public DateTime DeserializeDateTimeWithUtf8JsonSerializer()
    {
        return Utf8JsonSerializer.Deserialize<DateTime>(DateTimeOutputOfUtf8JsonSerializer);
    }
    private static readonly string DateTimeOffsetOutputOfJilSerializer = JilSerializer.Serialize(DateTimeOffsetInput);
    [Benchmark]
    public DateTimeOffset DeserializeDateTimeOffsetWithJilSerializer()
    {
        return JilSerializer.Deserialize<DateTimeOffset>(DateTimeOffsetOutputOfJilSerializer);
    }
    private static readonly string DateTimeOffsetOutputOfSpanJsonSerializer = SpanJsonSerializer.Serialize(DateTimeOffsetInput);
    [Benchmark]
    public DateTimeOffset DeserializeDateTimeOffsetWithSpanJsonSerializer()
    {
        return SpanJsonSerializer.Deserialize<DateTimeOffset>(DateTimeOffsetOutputOfSpanJsonSerializer);
    }
    private static readonly byte[] DateTimeOffsetOutputOfSpanJsonUtf8Serializer = SpanJsonUtf8Serializer.Serialize(DateTimeOffsetInput);
    [Benchmark]
    public DateTimeOffset DeserializeDateTimeOffsetWithSpanJsonUtf8Serializer()
    {
        return SpanJsonUtf8Serializer.Deserialize<DateTimeOffset>(DateTimeOffsetOutputOfSpanJsonUtf8Serializer);
    }
    private static readonly byte[] DateTimeOffsetOutputOfUtf8JsonSerializer = Utf8JsonSerializer.Serialize(DateTimeOffsetInput);
    [Benchmark]
    public DateTimeOffset DeserializeDateTimeOffsetWithUtf8JsonSerializer()
    {
        return Utf8JsonSerializer.Deserialize<DateTimeOffset>(DateTimeOffsetOutputOfUtf8JsonSerializer);
    }
    private static readonly string TimeSpanOutputOfJilSerializer = JilSerializer.Serialize(TimeSpanInput);
    [Benchmark]
    public TimeSpan DeserializeTimeSpanWithJilSerializer()
    {
        return JilSerializer.Deserialize<TimeSpan>(TimeSpanOutputOfJilSerializer);
    }
    private static readonly string TimeSpanOutputOfSpanJsonSerializer = SpanJsonSerializer.Serialize(TimeSpanInput);
    [Benchmark]
    public TimeSpan DeserializeTimeSpanWithSpanJsonSerializer()
    {
        return SpanJsonSerializer.Deserialize<TimeSpan>(TimeSpanOutputOfSpanJsonSerializer);
    }
    private static readonly byte[] TimeSpanOutputOfSpanJsonUtf8Serializer = SpanJsonUtf8Serializer.Serialize(TimeSpanInput);
    [Benchmark]
    public TimeSpan DeserializeTimeSpanWithSpanJsonUtf8Serializer()
    {
        return SpanJsonUtf8Serializer.Deserialize<TimeSpan>(TimeSpanOutputOfSpanJsonUtf8Serializer);
    }
    private static readonly byte[] TimeSpanOutputOfUtf8JsonSerializer = Utf8JsonSerializer.Serialize(TimeSpanInput);
    [Benchmark]
    public TimeSpan DeserializeTimeSpanWithUtf8JsonSerializer()
    {
        return Utf8JsonSerializer.Deserialize<TimeSpan>(TimeSpanOutputOfUtf8JsonSerializer);
    }
    private static readonly string DateOnlyOutputOfJilSerializer = JilSerializer.Serialize(DateOnlyInput);
    [Benchmark]
    public DateOnly DeserializeDateOnlyWithJilSerializer()
    {
        return JilSerializer.Deserialize<DateOnly>(DateOnlyOutputOfJilSerializer);
    }
    private static readonly string DateOnlyOutputOfSpanJsonSerializer = SpanJsonSerializer.Serialize(DateOnlyInput);
    [Benchmark]
    public DateOnly DeserializeDateOnlyWithSpanJsonSerializer()
    {
        return SpanJsonSerializer.Deserialize<DateOnly>(DateOnlyOutputOfSpanJsonSerializer);
    }
    private static readonly byte[] DateOnlyOutputOfSpanJsonUtf8Serializer = SpanJsonUtf8Serializer.Serialize(DateOnlyInput);
    [Benchmark]
    public DateOnly DeserializeDateOnlyWithSpanJsonUtf8Serializer()
    {
        return SpanJsonUtf8Serializer.Deserialize<DateOnly>(DateOnlyOutputOfSpanJsonUtf8Serializer);
    }
    private static readonly byte[] DateOnlyOutputOfUtf8JsonSerializer = Utf8JsonSerializer.Serialize(DateOnlyInput);
    [Benchmark]
    public DateOnly DeserializeDateOnlyWithUtf8JsonSerializer()
    {
        return Utf8JsonSerializer.Deserialize<DateOnly>(DateOnlyOutputOfUtf8JsonSerializer);
    }
    private static readonly string TimeOnlyOutputOfJilSerializer = JilSerializer.Serialize(TimeOnlyInput);
    [Benchmark]
    public TimeOnly DeserializeTimeOnlyWithJilSerializer()
    {
        return JilSerializer.Deserialize<TimeOnly>(TimeOnlyOutputOfJilSerializer);
    }
    private static readonly string TimeOnlyOutputOfSpanJsonSerializer = SpanJsonSerializer.Serialize(TimeOnlyInput);
    [Benchmark]
    public TimeOnly DeserializeTimeOnlyWithSpanJsonSerializer()
    {
        return SpanJsonSerializer.Deserialize<TimeOnly>(TimeOnlyOutputOfSpanJsonSerializer);
    }
    private static readonly byte[] TimeOnlyOutputOfSpanJsonUtf8Serializer = SpanJsonUtf8Serializer.Serialize(TimeOnlyInput);
    [Benchmark]
    public TimeOnly DeserializeTimeOnlyWithSpanJsonUtf8Serializer()
    {
        return SpanJsonUtf8Serializer.Deserialize<TimeOnly>(TimeOnlyOutputOfSpanJsonUtf8Serializer);
    }
    private static readonly byte[] TimeOnlyOutputOfUtf8JsonSerializer = Utf8JsonSerializer.Serialize(TimeOnlyInput);
    [Benchmark]
    public TimeOnly DeserializeTimeOnlyWithUtf8JsonSerializer()
    {
        return Utf8JsonSerializer.Deserialize<TimeOnly>(TimeOnlyOutputOfUtf8JsonSerializer);
    }
    private static readonly string GuidOutputOfJilSerializer = JilSerializer.Serialize(GuidInput);
    [Benchmark]
    public Guid DeserializeGuidWithJilSerializer()
    {
        return JilSerializer.Deserialize<Guid>(GuidOutputOfJilSerializer);
    }
    private static readonly string GuidOutputOfSpanJsonSerializer = SpanJsonSerializer.Serialize(GuidInput);
    [Benchmark]
    public Guid DeserializeGuidWithSpanJsonSerializer()
    {
        return SpanJsonSerializer.Deserialize<Guid>(GuidOutputOfSpanJsonSerializer);
    }
    private static readonly byte[] GuidOutputOfSpanJsonUtf8Serializer = SpanJsonUtf8Serializer.Serialize(GuidInput);
    [Benchmark]
    public Guid DeserializeGuidWithSpanJsonUtf8Serializer()
    {
        return SpanJsonUtf8Serializer.Deserialize<Guid>(GuidOutputOfSpanJsonUtf8Serializer);
    }
    private static readonly byte[] GuidOutputOfUtf8JsonSerializer = Utf8JsonSerializer.Serialize(GuidInput);
    [Benchmark]
    public Guid DeserializeGuidWithUtf8JsonSerializer()
    {
        return Utf8JsonSerializer.Deserialize<Guid>(GuidOutputOfUtf8JsonSerializer);
    }
    private static readonly string StringOutputOfJilSerializer = JilSerializer.Serialize(StringInput);
    [Benchmark]
    public string DeserializeStringWithJilSerializer()
    {
        return JilSerializer.Deserialize<string>(StringOutputOfJilSerializer);
    }
    private static readonly string StringOutputOfSpanJsonSerializer = SpanJsonSerializer.Serialize(StringInput);
    [Benchmark]
    public string DeserializeStringWithSpanJsonSerializer()
    {
        return SpanJsonSerializer.Deserialize<string>(StringOutputOfSpanJsonSerializer);
    }
    private static readonly byte[] StringOutputOfSpanJsonUtf8Serializer = SpanJsonUtf8Serializer.Serialize(StringInput);
    [Benchmark]
    public string DeserializeStringWithSpanJsonUtf8Serializer()
    {
        return SpanJsonUtf8Serializer.Deserialize<string>(StringOutputOfSpanJsonUtf8Serializer);
    }
    private static readonly byte[] StringOutputOfUtf8JsonSerializer = Utf8JsonSerializer.Serialize(StringInput);
    [Benchmark]
    public string DeserializeStringWithUtf8JsonSerializer()
    {
        return Utf8JsonSerializer.Deserialize<string>(StringOutputOfUtf8JsonSerializer);
    }
    private static readonly string DecimalOutputOfJilSerializer = JilSerializer.Serialize(DecimalInput);
    [Benchmark]
    public decimal DeserializeDecimalWithJilSerializer()
    {
        return JilSerializer.Deserialize<decimal>(DecimalOutputOfJilSerializer);
    }
    private static readonly string DecimalOutputOfSpanJsonSerializer = SpanJsonSerializer.Serialize(DecimalInput);
    [Benchmark]
    public decimal DeserializeDecimalWithSpanJsonSerializer()
    {
        return SpanJsonSerializer.Deserialize<decimal>(DecimalOutputOfSpanJsonSerializer);
    }
    private static readonly byte[] DecimalOutputOfSpanJsonUtf8Serializer = SpanJsonUtf8Serializer.Serialize(DecimalInput);
    [Benchmark]
    public decimal DeserializeDecimalWithSpanJsonUtf8Serializer()
    {
        return SpanJsonUtf8Serializer.Deserialize<decimal>(DecimalOutputOfSpanJsonUtf8Serializer);
    }
    private static readonly byte[] DecimalOutputOfUtf8JsonSerializer = Utf8JsonSerializer.Serialize(DecimalInput);
    [Benchmark]
    public decimal DeserializeDecimalWithUtf8JsonSerializer()
    {
        return Utf8JsonSerializer.Deserialize<decimal>(DecimalOutputOfUtf8JsonSerializer);
    }
    private static readonly string VersionOutputOfJilSerializer = JilSerializer.Serialize(VersionInput);
    [Benchmark]
    public Version DeserializeVersionWithJilSerializer()
    {
        return JilSerializer.Deserialize<Version>(VersionOutputOfJilSerializer);
    }
    private static readonly string VersionOutputOfSpanJsonSerializer = SpanJsonSerializer.Serialize(VersionInput);
    [Benchmark]
    public Version DeserializeVersionWithSpanJsonSerializer()
    {
        return SpanJsonSerializer.Deserialize<Version>(VersionOutputOfSpanJsonSerializer);
    }
    private static readonly byte[] VersionOutputOfSpanJsonUtf8Serializer = SpanJsonUtf8Serializer.Serialize(VersionInput);
    [Benchmark]
    public Version DeserializeVersionWithSpanJsonUtf8Serializer()
    {
        return SpanJsonUtf8Serializer.Deserialize<Version>(VersionOutputOfSpanJsonUtf8Serializer);
    }
    private static readonly byte[] VersionOutputOfUtf8JsonSerializer = Utf8JsonSerializer.Serialize(VersionInput);
    [Benchmark]
    public Version DeserializeVersionWithUtf8JsonSerializer()
    {
        return Utf8JsonSerializer.Deserialize<Version>(VersionOutputOfUtf8JsonSerializer);
    }
    private static readonly string UriOutputOfJilSerializer = JilSerializer.Serialize(UriInput);
    [Benchmark]
    public Uri DeserializeUriWithJilSerializer()
    {
        return JilSerializer.Deserialize<Uri>(UriOutputOfJilSerializer);
    }
    private static readonly string UriOutputOfSpanJsonSerializer = SpanJsonSerializer.Serialize(UriInput);
    [Benchmark]
    public Uri DeserializeUriWithSpanJsonSerializer()
    {
        return SpanJsonSerializer.Deserialize<Uri>(UriOutputOfSpanJsonSerializer);
    }
    private static readonly byte[] UriOutputOfSpanJsonUtf8Serializer = SpanJsonUtf8Serializer.Serialize(UriInput);
    [Benchmark]
    public Uri DeserializeUriWithSpanJsonUtf8Serializer()
    {
        return SpanJsonUtf8Serializer.Deserialize<Uri>(UriOutputOfSpanJsonUtf8Serializer);
    }
    private static readonly byte[] UriOutputOfUtf8JsonSerializer = Utf8JsonSerializer.Serialize(UriInput);
    [Benchmark]
    public Uri DeserializeUriWithUtf8JsonSerializer()
    {
        return Utf8JsonSerializer.Deserialize<Uri>(UriOutputOfUtf8JsonSerializer);
    }
  }
}
