// Autogenerated
// ReSharper disable BuiltInTypeReferenceStyle
// ReSharper disable InconsistentNaming
using System;
using System.Collections.Generic;
using System.Text;
using Xunit;
namespace SpanJson.Tests
{
    public partial class DictionaryTests
    {
        [Fact]
        public void SerializeDeserializeSByteKeysUtf16()
        {
            var input = new Dictionary<sbyte, string>();
            for(sbyte i = 0;i<10;i++)
            {
                input.Add(i, "Hello World"+i);
            }
            var serialized = JsonSerializer.Generic.Utf16.Serialize(input);
            for(sbyte i = 0;i<10;i++)
            {
                Assert.Contains($"\"{i}\":\"Hello World{i}\"", serialized, StringComparison.Ordinal);
            }
            var deserialized = JsonSerializer.Generic.Utf16.Deserialize<Dictionary<sbyte, string>>(serialized);
            Assert.Equal(input, deserialized);
        }

        [Fact]
        public void SerializeDeserializeSByteKeysUtf8()
        {
            var input = new Dictionary<sbyte, string>();
            for(sbyte i = 0;i<10;i++)
            {
                input.Add(i, "Hello World"+i);
            }
            var serialized = JsonSerializer.Generic.Utf8.Serialize(input);
            var encodedString = Encoding.UTF8.GetString(serialized);
            for(sbyte i = 0;i<10;i++)
            {
                Assert.Contains($"\"{i}\":\"Hello World{i}\"", encodedString, StringComparison.Ordinal);
            }
            var deserialized = JsonSerializer.Generic.Utf8.Deserialize<Dictionary<sbyte, string>>(serialized);
            Assert.Equal(input, deserialized);
        }

        [Fact]
        public void SerializeDeserializeInt16KeysUtf16()
        {
            var input = new Dictionary<short, string>();
            for(short i = 0;i<10;i++)
            {
                input.Add(i, "Hello World"+i);
            }
            var serialized = JsonSerializer.Generic.Utf16.Serialize(input);
            for(short i = 0;i<10;i++)
            {
                Assert.Contains($"\"{i}\":\"Hello World{i}\"", serialized, StringComparison.Ordinal);
            }
            var deserialized = JsonSerializer.Generic.Utf16.Deserialize<Dictionary<short, string>>(serialized);
            Assert.Equal(input, deserialized);
        }

        [Fact]
        public void SerializeDeserializeInt16KeysUtf8()
        {
            var input = new Dictionary<short, string>();
            for(short i = 0;i<10;i++)
            {
                input.Add(i, "Hello World"+i);
            }
            var serialized = JsonSerializer.Generic.Utf8.Serialize(input);
            var encodedString = Encoding.UTF8.GetString(serialized);
            for(short i = 0;i<10;i++)
            {
                Assert.Contains($"\"{i}\":\"Hello World{i}\"", encodedString, StringComparison.Ordinal);
            }
            var deserialized = JsonSerializer.Generic.Utf8.Deserialize<Dictionary<short, string>>(serialized);
            Assert.Equal(input, deserialized);
        }

        [Fact]
        public void SerializeDeserializeInt32KeysUtf16()
        {
            var input = new Dictionary<int, string>();
            for(int i = 0;i<10;i++)
            {
                input.Add(i, "Hello World"+i);
            }
            var serialized = JsonSerializer.Generic.Utf16.Serialize(input);
            for(int i = 0;i<10;i++)
            {
                Assert.Contains($"\"{i}\":\"Hello World{i}\"", serialized, StringComparison.Ordinal);
            }
            var deserialized = JsonSerializer.Generic.Utf16.Deserialize<Dictionary<int, string>>(serialized);
            Assert.Equal(input, deserialized);
        }

        [Fact]
        public void SerializeDeserializeInt32KeysUtf8()
        {
            var input = new Dictionary<int, string>();
            for(int i = 0;i<10;i++)
            {
                input.Add(i, "Hello World"+i);
            }
            var serialized = JsonSerializer.Generic.Utf8.Serialize(input);
            var encodedString = Encoding.UTF8.GetString(serialized);
            for(int i = 0;i<10;i++)
            {
                Assert.Contains($"\"{i}\":\"Hello World{i}\"", encodedString, StringComparison.Ordinal);
            }
            var deserialized = JsonSerializer.Generic.Utf8.Deserialize<Dictionary<int, string>>(serialized);
            Assert.Equal(input, deserialized);
        }

        [Fact]
        public void SerializeDeserializeInt64KeysUtf16()
        {
            var input = new Dictionary<long, string>();
            for(long i = 0;i<10;i++)
            {
                input.Add(i, "Hello World"+i);
            }
            var serialized = JsonSerializer.Generic.Utf16.Serialize(input);
            for(long i = 0;i<10;i++)
            {
                Assert.Contains($"\"{i}\":\"Hello World{i}\"", serialized, StringComparison.Ordinal);
            }
            var deserialized = JsonSerializer.Generic.Utf16.Deserialize<Dictionary<long, string>>(serialized);
            Assert.Equal(input, deserialized);
        }

        [Fact]
        public void SerializeDeserializeInt64KeysUtf8()
        {
            var input = new Dictionary<long, string>();
            for(long i = 0;i<10;i++)
            {
                input.Add(i, "Hello World"+i);
            }
            var serialized = JsonSerializer.Generic.Utf8.Serialize(input);
            var encodedString = Encoding.UTF8.GetString(serialized);
            for(long i = 0;i<10;i++)
            {
                Assert.Contains($"\"{i}\":\"Hello World{i}\"", encodedString, StringComparison.Ordinal);
            }
            var deserialized = JsonSerializer.Generic.Utf8.Deserialize<Dictionary<long, string>>(serialized);
            Assert.Equal(input, deserialized);
        }

        [Fact]
        public void SerializeDeserializeByteKeysUtf16()
        {
            var input = new Dictionary<byte, string>();
            for(byte i = 0;i<10;i++)
            {
                input.Add(i, "Hello World"+i);
            }
            var serialized = JsonSerializer.Generic.Utf16.Serialize(input);
            for(byte i = 0;i<10;i++)
            {
                Assert.Contains($"\"{i}\":\"Hello World{i}\"", serialized, StringComparison.Ordinal);
            }
            var deserialized = JsonSerializer.Generic.Utf16.Deserialize<Dictionary<byte, string>>(serialized);
            Assert.Equal(input, deserialized);
        }

        [Fact]
        public void SerializeDeserializeByteKeysUtf8()
        {
            var input = new Dictionary<byte, string>();
            for(byte i = 0;i<10;i++)
            {
                input.Add(i, "Hello World"+i);
            }
            var serialized = JsonSerializer.Generic.Utf8.Serialize(input);
            var encodedString = Encoding.UTF8.GetString(serialized);
            for(byte i = 0;i<10;i++)
            {
                Assert.Contains($"\"{i}\":\"Hello World{i}\"", encodedString, StringComparison.Ordinal);
            }
            var deserialized = JsonSerializer.Generic.Utf8.Deserialize<Dictionary<byte, string>>(serialized);
            Assert.Equal(input, deserialized);
        }

        [Fact]
        public void SerializeDeserializeUInt16KeysUtf16()
        {
            var input = new Dictionary<ushort, string>();
            for(ushort i = 0;i<10;i++)
            {
                input.Add(i, "Hello World"+i);
            }
            var serialized = JsonSerializer.Generic.Utf16.Serialize(input);
            for(ushort i = 0;i<10;i++)
            {
                Assert.Contains($"\"{i}\":\"Hello World{i}\"", serialized, StringComparison.Ordinal);
            }
            var deserialized = JsonSerializer.Generic.Utf16.Deserialize<Dictionary<ushort, string>>(serialized);
            Assert.Equal(input, deserialized);
        }

        [Fact]
        public void SerializeDeserializeUInt16KeysUtf8()
        {
            var input = new Dictionary<ushort, string>();
            for(ushort i = 0;i<10;i++)
            {
                input.Add(i, "Hello World"+i);
            }
            var serialized = JsonSerializer.Generic.Utf8.Serialize(input);
            var encodedString = Encoding.UTF8.GetString(serialized);
            for(ushort i = 0;i<10;i++)
            {
                Assert.Contains($"\"{i}\":\"Hello World{i}\"", encodedString, StringComparison.Ordinal);
            }
            var deserialized = JsonSerializer.Generic.Utf8.Deserialize<Dictionary<ushort, string>>(serialized);
            Assert.Equal(input, deserialized);
        }

        [Fact]
        public void SerializeDeserializeUInt32KeysUtf16()
        {
            var input = new Dictionary<uint, string>();
            for(uint i = 0;i<10;i++)
            {
                input.Add(i, "Hello World"+i);
            }
            var serialized = JsonSerializer.Generic.Utf16.Serialize(input);
            for(uint i = 0;i<10;i++)
            {
                Assert.Contains($"\"{i}\":\"Hello World{i}\"", serialized, StringComparison.Ordinal);
            }
            var deserialized = JsonSerializer.Generic.Utf16.Deserialize<Dictionary<uint, string>>(serialized);
            Assert.Equal(input, deserialized);
        }

        [Fact]
        public void SerializeDeserializeUInt32KeysUtf8()
        {
            var input = new Dictionary<uint, string>();
            for(uint i = 0;i<10;i++)
            {
                input.Add(i, "Hello World"+i);
            }
            var serialized = JsonSerializer.Generic.Utf8.Serialize(input);
            var encodedString = Encoding.UTF8.GetString(serialized);
            for(uint i = 0;i<10;i++)
            {
                Assert.Contains($"\"{i}\":\"Hello World{i}\"", encodedString, StringComparison.Ordinal);
            }
            var deserialized = JsonSerializer.Generic.Utf8.Deserialize<Dictionary<uint, string>>(serialized);
            Assert.Equal(input, deserialized);
        }

        [Fact]
        public void SerializeDeserializeUInt64KeysUtf16()
        {
            var input = new Dictionary<ulong, string>();
            for(ulong i = 0;i<10;i++)
            {
                input.Add(i, "Hello World"+i);
            }
            var serialized = JsonSerializer.Generic.Utf16.Serialize(input);
            for(ulong i = 0;i<10;i++)
            {
                Assert.Contains($"\"{i}\":\"Hello World{i}\"", serialized, StringComparison.Ordinal);
            }
            var deserialized = JsonSerializer.Generic.Utf16.Deserialize<Dictionary<ulong, string>>(serialized);
            Assert.Equal(input, deserialized);
        }

        [Fact]
        public void SerializeDeserializeUInt64KeysUtf8()
        {
            var input = new Dictionary<ulong, string>();
            for(ulong i = 0;i<10;i++)
            {
                input.Add(i, "Hello World"+i);
            }
            var serialized = JsonSerializer.Generic.Utf8.Serialize(input);
            var encodedString = Encoding.UTF8.GetString(serialized);
            for(ulong i = 0;i<10;i++)
            {
                Assert.Contains($"\"{i}\":\"Hello World{i}\"", encodedString, StringComparison.Ordinal);
            }
            var deserialized = JsonSerializer.Generic.Utf8.Deserialize<Dictionary<ulong, string>>(serialized);
            Assert.Equal(input, deserialized);
        }
    }
}