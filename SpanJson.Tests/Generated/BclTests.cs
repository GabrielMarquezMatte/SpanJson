using System;
using System.Collections.Generic;
using SpanJson;
using SpanJson.Tests;
using Xunit;
// Autogenerated
// ReSharper disable BuiltInTypeReferenceStyle
namespace SpanJson.Tests.Generated
{
    public class NullableSByteListTests : NullableListTestBase<sbyte>
    {
    }

    public class NullableSByteArrayTests : NullableArrayTestBase<sbyte>
    {
    }
    public partial class SByteTests : StructTestBase<sbyte>
    {
        [Theory]
        [InlineData(sbyte.MinValue)]
        [InlineData(sbyte.MaxValue)]
        public void SerializeDeserializeMinMaxUtf8(sbyte input)
        {
            var serialized = JsonSerializer.Generic.Utf8.Serialize(input);
            var deserialized = JsonSerializer.Generic.Utf8.Deserialize<sbyte>(serialized);
            Assert.Equal(input, deserialized);
        }

        [Theory]
        [InlineData(sbyte.MinValue)]
        [InlineData(sbyte.MaxValue)]
        public void SerializeDeserializeMinMaxUtf16(sbyte input)
        {
            var serialized = JsonSerializer.Generic.Utf16.Serialize(input);
            var deserialized = JsonSerializer.Generic.Utf16.Deserialize<sbyte>(serialized);
            Assert.Equal(input, deserialized);
        }

        [Fact]
        public void SerializeDeserializeOverflowUtf8()
        {
            var serialized = JsonSerializer.Generic.Utf8.Serialize(ulong.MaxValue);
            Assert.Throws<OverflowException>( () => JsonSerializer.Generic.Utf8.Deserialize<sbyte>(serialized));
        }

        [Fact]
        public void SerializeDeserializeOverflowUtf16()
        {
            var serialized = JsonSerializer.Generic.Utf16.Serialize(ulong.MaxValue);
            Assert.Throws<OverflowException>( () => JsonSerializer.Generic.Utf16.Deserialize<sbyte>(serialized));
        }

        [Fact]
        public void PrimitiveWrapperUtf8()
        {
            var value = Fixture.Create<sbyte>();
            var writer = new JsonWriter<byte>();
            writer.WriteSByte(value);
            var output = writer.ToByteArray();

            var reader = new JsonReader<byte>(output);
            var deserialized = reader.ReadSByte();
            Assert.Equal(value, deserialized);
        }

        [Fact]
        public void PrimitiveWrapperUtf16()
        {
            var value = Fixture.Create<sbyte>();
            var writer = new JsonWriter<char>();
            writer.WriteSByte(value);
            var output = writer.ToString();

            var reader = new JsonReader<char>(output);
            var deserialized = reader.ReadSByte();
            Assert.Equal(value, deserialized);
        }
    }
    public class SByteListTests : ListTestBase<sbyte>
    {
    }

    public class SByteArrayTests : ArrayTestBase<sbyte>
    {
    }
    public class NullableInt16ListTests : NullableListTestBase<short>
    {
    }

    public class NullableInt16ArrayTests : NullableArrayTestBase<short>
    {
    }
    public class Int16Tests : StructTestBase<short>
    {
        [Theory]
        [InlineData(short.MinValue)]
        [InlineData(short.MaxValue)]
        public void SerializeDeserializeMinMaxUtf8(short input)
        {
            var serialized = JsonSerializer.Generic.Utf8.Serialize(input);
            var deserialized = JsonSerializer.Generic.Utf8.Deserialize<short>(serialized);
            Assert.Equal(input, deserialized);
        }

        [Theory]
        [InlineData(short.MinValue)]
        [InlineData(short.MaxValue)]
        public void SerializeDeserializeMinMaxUtf16(short input)
        {
            var serialized = JsonSerializer.Generic.Utf16.Serialize(input);
            var deserialized = JsonSerializer.Generic.Utf16.Deserialize<short>(serialized);
            Assert.Equal(input, deserialized);
        }

        [Fact]
        public void SerializeDeserializeOverflowUtf8()
        {
            var serialized = JsonSerializer.Generic.Utf8.Serialize(ulong.MaxValue);
            Assert.Throws<OverflowException>( () => JsonSerializer.Generic.Utf8.Deserialize<short>(serialized));
        }

        [Fact]
        public void SerializeDeserializeOverflowUtf16()
        {
            var serialized = JsonSerializer.Generic.Utf16.Serialize(ulong.MaxValue);
            Assert.Throws<OverflowException>( () => JsonSerializer.Generic.Utf16.Deserialize<short>(serialized));
        }

        [Fact]
        public void PrimitiveWrapperUtf8()
        {
            var value = Fixture.Create<short>();
            var writer = new JsonWriter<byte>();
            writer.WriteInt16(value);
            var output = writer.ToByteArray();

            var reader = new JsonReader<byte>(output);
            var deserialized = reader.ReadInt16();
            Assert.Equal(value, deserialized);
        }

        [Fact]
        public void PrimitiveWrapperUtf16()
        {
            var value = Fixture.Create<short>();
            var writer = new JsonWriter<char>();
            writer.WriteInt16(value);
            var output = writer.ToString();

            var reader = new JsonReader<char>(output);
            var deserialized = reader.ReadInt16();
            Assert.Equal(value, deserialized);
        }
    }
    public class Int16ListTests : ListTestBase<short>
    {
    }

    public class Int16ArrayTests : ArrayTestBase<short>
    {
    }
    public class NullableInt32ListTests : NullableListTestBase<int>
    {
    }

    public class NullableInt32ArrayTests : NullableArrayTestBase<int>
    {
    }
    public class Int32Tests : StructTestBase<int>
    {
        [Theory]
        [InlineData(int.MinValue)]
        [InlineData(int.MaxValue)]
        public void SerializeDeserializeMinMaxUtf8(int input)
        {
            var serialized = JsonSerializer.Generic.Utf8.Serialize(input);
            var deserialized = JsonSerializer.Generic.Utf8.Deserialize<int>(serialized);
            Assert.Equal(input, deserialized);
        }

        [Theory]
        [InlineData(int.MinValue)]
        [InlineData(int.MaxValue)]
        public void SerializeDeserializeMinMaxUtf16(int input)
        {
            var serialized = JsonSerializer.Generic.Utf16.Serialize(input);
            var deserialized = JsonSerializer.Generic.Utf16.Deserialize<int>(serialized);
            Assert.Equal(input, deserialized);
        }

        [Fact]
        public void SerializeDeserializeOverflowUtf8()
        {
            var serialized = JsonSerializer.Generic.Utf8.Serialize(ulong.MaxValue);
            Assert.Throws<OverflowException>( () => JsonSerializer.Generic.Utf8.Deserialize<int>(serialized));
        }

        [Fact]
        public void SerializeDeserializeOverflowUtf16()
        {
            var serialized = JsonSerializer.Generic.Utf16.Serialize(ulong.MaxValue);
            Assert.Throws<OverflowException>( () => JsonSerializer.Generic.Utf16.Deserialize<int>(serialized));
        }

        [Fact]
        public void PrimitiveWrapperUtf8()
        {
            var value = Fixture.Create<int>();
            var writer = new JsonWriter<byte>();
            writer.WriteInt32(value);
            var output = writer.ToByteArray();

            var reader = new JsonReader<byte>(output);
            var deserialized = reader.ReadInt32();
            Assert.Equal(value, deserialized);
        }

        [Fact]
        public void PrimitiveWrapperUtf16()
        {
            var value = Fixture.Create<int>();
            var writer = new JsonWriter<char>();
            writer.WriteInt32(value);
            var output = writer.ToString();

            var reader = new JsonReader<char>(output);
            var deserialized = reader.ReadInt32();
            Assert.Equal(value, deserialized);
        }
    }
    public class Int32ListTests : ListTestBase<int>
    {
    }

    public class Int32ArrayTests : ArrayTestBase<int>
    {
    }
    public class NullableInt64ListTests : NullableListTestBase<long>
    {
    }

    public class NullableInt64ArrayTests : NullableArrayTestBase<long>
    {
    }
    public class Int64Tests : StructTestBase<long>
    {
        [Theory]
        [InlineData(long.MinValue)]
        [InlineData(long.MaxValue)]
        public void SerializeDeserializeMinMaxUtf8(long input)
        {
            var serialized = JsonSerializer.Generic.Utf8.Serialize(input);
            var deserialized = JsonSerializer.Generic.Utf8.Deserialize<long>(serialized);
            Assert.Equal(input, deserialized);
        }

        [Theory]
        [InlineData(long.MinValue)]
        [InlineData(long.MaxValue)]
        public void SerializeDeserializeMinMaxUtf16(long input)
        {
            var serialized = JsonSerializer.Generic.Utf16.Serialize(input);
            var deserialized = JsonSerializer.Generic.Utf16.Deserialize<long>(serialized);
            Assert.Equal(input, deserialized);
        }

        [Fact]
        public void SerializeDeserializeOverflowUtf8()
        {
            var serialized = JsonSerializer.Generic.Utf8.Serialize(ulong.MaxValue);
            Assert.Throws<OverflowException>( () => JsonSerializer.Generic.Utf8.Deserialize<long>(serialized));
        }

        [Fact]
        public void SerializeDeserializeOverflowUtf16()
        {
            var serialized = JsonSerializer.Generic.Utf16.Serialize(ulong.MaxValue);
            Assert.Throws<OverflowException>( () => JsonSerializer.Generic.Utf16.Deserialize<long>(serialized));
        }

        [Fact]
        public void PrimitiveWrapperUtf8()
        {
            var value = Fixture.Create<long>();
            var writer = new JsonWriter<byte>();
            writer.WriteInt64(value);
            var output = writer.ToByteArray();

            var reader = new JsonReader<byte>(output);
            var deserialized = reader.ReadInt64();
            Assert.Equal(value, deserialized);
        }

        [Fact]
        public void PrimitiveWrapperUtf16()
        {
            var value = Fixture.Create<long>();
            var writer = new JsonWriter<char>();
            writer.WriteInt64(value);
            var output = writer.ToString();

            var reader = new JsonReader<char>(output);
            var deserialized = reader.ReadInt64();
            Assert.Equal(value, deserialized);
        }
    }
    public class Int64ListTests : ListTestBase<long>
    {
    }

    public class Int64ArrayTests : ArrayTestBase<long>
    {
    }
    public class NullableByteListTests : NullableListTestBase<byte>
    {
    }

    public class NullableByteArrayTests : NullableArrayTestBase<byte>
    {
    }
    public class ByteTests : StructTestBase<byte>
    {
        [Theory]
        [InlineData(byte.MinValue)]
        [InlineData(byte.MaxValue)]
        public void SerializeDeserializeMinMaxUtf8(byte input)
        {
            var serialized = JsonSerializer.Generic.Utf8.Serialize(input);
            var deserialized = JsonSerializer.Generic.Utf8.Deserialize<byte>(serialized);
            Assert.Equal(input, deserialized);
        }

        [Theory]
        [InlineData(byte.MinValue)]
        [InlineData(byte.MaxValue)]
        public void SerializeDeserializeMinMaxUtf16(byte input)
        {
            var serialized = JsonSerializer.Generic.Utf16.Serialize(input);
            var deserialized = JsonSerializer.Generic.Utf16.Deserialize<byte>(serialized);
            Assert.Equal(input, deserialized);
        }

        [Fact]
        public void SerializeDeserializeOverflowUtf8()
        {
            var serialized = JsonSerializer.Generic.Utf8.Serialize(ulong.MaxValue);
            Assert.Throws<OverflowException>( () => JsonSerializer.Generic.Utf8.Deserialize<byte>(serialized));
        }

        [Fact]
        public void SerializeDeserializeOverflowUtf16()
        {
            var serialized = JsonSerializer.Generic.Utf16.Serialize(ulong.MaxValue);
            Assert.Throws<OverflowException>( () => JsonSerializer.Generic.Utf16.Deserialize<byte>(serialized));
        }

        [Fact]
        public void PrimitiveWrapperUtf8()
        {
            var value = Fixture.Create<byte>();
            var writer = new JsonWriter<byte>();
            writer.WriteByte(value);
            var output = writer.ToByteArray();

            var reader = new JsonReader<byte>(output);
            var deserialized = reader.ReadByte();
            Assert.Equal(value, deserialized);
        }

        [Fact]
        public void PrimitiveWrapperUtf16()
        {
            var value = Fixture.Create<byte>();
            var writer = new JsonWriter<char>();
            writer.WriteByte(value);
            var output = writer.ToString();

            var reader = new JsonReader<char>(output);
            var deserialized = reader.ReadByte();
            Assert.Equal(value, deserialized);
        }
    }
    public class ByteListTests : ListTestBase<byte>
    {
    }

    public class ByteArrayTests : ArrayTestBase<byte>
    {
    }
    public class NullableUInt16ListTests : NullableListTestBase<ushort>
    {
    }

    public class NullableUInt16ArrayTests : NullableArrayTestBase<ushort>
    {
    }
    public class UInt16Tests : StructTestBase<ushort>
    {
        [Theory]
        [InlineData(ushort.MinValue)]
        [InlineData(ushort.MaxValue)]
        public void SerializeDeserializeMinMaxUtf8(ushort input)
        {
            var serialized = JsonSerializer.Generic.Utf8.Serialize(input);
            var deserialized = JsonSerializer.Generic.Utf8.Deserialize<ushort>(serialized);
            Assert.Equal(input, deserialized);
        }

        [Theory]
        [InlineData(ushort.MinValue)]
        [InlineData(ushort.MaxValue)]
        public void SerializeDeserializeMinMaxUtf16(ushort input)
        {
            var serialized = JsonSerializer.Generic.Utf16.Serialize(input);
            var deserialized = JsonSerializer.Generic.Utf16.Deserialize<ushort>(serialized);
            Assert.Equal(input, deserialized);
        }

        [Fact]
        public void SerializeDeserializeOverflowUtf8()
        {
            var serialized = JsonSerializer.Generic.Utf8.Serialize(ulong.MaxValue);
            Assert.Throws<OverflowException>( () => JsonSerializer.Generic.Utf8.Deserialize<ushort>(serialized));
        }

        [Fact]
        public void SerializeDeserializeOverflowUtf16()
        {
            var serialized = JsonSerializer.Generic.Utf16.Serialize(ulong.MaxValue);
            Assert.Throws<OverflowException>( () => JsonSerializer.Generic.Utf16.Deserialize<ushort>(serialized));
        }

        [Fact]
        public void PrimitiveWrapperUtf8()
        {
            var value = Fixture.Create<ushort>();
            var writer = new JsonWriter<byte>();
            writer.WriteUInt16(value);
            var output = writer.ToByteArray();

            var reader = new JsonReader<byte>(output);
            var deserialized = reader.ReadUInt16();
            Assert.Equal(value, deserialized);
        }

        [Fact]
        public void PrimitiveWrapperUtf16()
        {
            var value = Fixture.Create<ushort>();
            var writer = new JsonWriter<char>();
            writer.WriteUInt16(value);
            var output = writer.ToString();

            var reader = new JsonReader<char>(output);
            var deserialized = reader.ReadUInt16();
            Assert.Equal(value, deserialized);
        }
    }
    public class UInt16ListTests : ListTestBase<ushort>
    {
    }

    public class UInt16ArrayTests : ArrayTestBase<ushort>
    {
    }
    public class NullableUInt32ListTests : NullableListTestBase<uint>
    {
    }

    public class NullableUInt32ArrayTests : NullableArrayTestBase<uint>
    {
    }
    public class UInt32Tests : StructTestBase<uint>
    {
        [Theory]
        [InlineData(uint.MinValue)]
        [InlineData(uint.MaxValue)]
        public void SerializeDeserializeMinMaxUtf8(uint input)
        {
            var serialized = JsonSerializer.Generic.Utf8.Serialize(input);
            var deserialized = JsonSerializer.Generic.Utf8.Deserialize<uint>(serialized);
            Assert.Equal(input, deserialized);
        }

        [Theory]
        [InlineData(uint.MinValue)]
        [InlineData(uint.MaxValue)]
        public void SerializeDeserializeMinMaxUtf16(uint input)
        {
            var serialized = JsonSerializer.Generic.Utf16.Serialize(input);
            var deserialized = JsonSerializer.Generic.Utf16.Deserialize<uint>(serialized);
            Assert.Equal(input, deserialized);
        }

        [Fact]
        public void SerializeDeserializeOverflowUtf8()
        {
            var serialized = JsonSerializer.Generic.Utf8.Serialize(ulong.MaxValue);
            Assert.Throws<OverflowException>( () => JsonSerializer.Generic.Utf8.Deserialize<uint>(serialized));
        }

        [Fact]
        public void SerializeDeserializeOverflowUtf16()
        {
            var serialized = JsonSerializer.Generic.Utf16.Serialize(ulong.MaxValue);
            Assert.Throws<OverflowException>( () => JsonSerializer.Generic.Utf16.Deserialize<uint>(serialized));
        }

        [Fact]
        public void PrimitiveWrapperUtf8()
        {
            var value = Fixture.Create<uint>();
            var writer = new JsonWriter<byte>();
            writer.WriteUInt32(value);
            var output = writer.ToByteArray();

            var reader = new JsonReader<byte>(output);
            var deserialized = reader.ReadUInt32();
            Assert.Equal(value, deserialized);
        }

        [Fact]
        public void PrimitiveWrapperUtf16()
        {
            var value = Fixture.Create<uint>();
            var writer = new JsonWriter<char>();
            writer.WriteUInt32(value);
            var output = writer.ToString();

            var reader = new JsonReader<char>(output);
            var deserialized = reader.ReadUInt32();
            Assert.Equal(value, deserialized);
        }
    }
    public class UInt32ListTests : ListTestBase<uint>
    {
    }

    public class UInt32ArrayTests : ArrayTestBase<uint>
    {
    }
    public class NullableUInt64ListTests : NullableListTestBase<ulong>
    {
    }

    public class NullableUInt64ArrayTests : NullableArrayTestBase<ulong>
    {
    }
    public partial class UInt64Tests : StructTestBase<ulong>
    {
        [Theory]
        [InlineData(ulong.MinValue)]
        [InlineData(ulong.MaxValue)]
        public void SerializeDeserializeMinMaxUtf8(ulong input)
        {
            var serialized = JsonSerializer.Generic.Utf8.Serialize(input);
            var deserialized = JsonSerializer.Generic.Utf8.Deserialize<ulong>(serialized);
            Assert.Equal(input, deserialized);
        }

        [Theory]
        [InlineData(ulong.MinValue)]
        [InlineData(ulong.MaxValue)]
        public void SerializeDeserializeMinMaxUtf16(ulong input)
        {
            var serialized = JsonSerializer.Generic.Utf16.Serialize(input);
            var deserialized = JsonSerializer.Generic.Utf16.Deserialize<ulong>(serialized);
            Assert.Equal(input, deserialized);
        }

        [Fact]
        public void PrimitiveWrapperUtf8()
        {
            var value = Fixture.Create<ulong>();
            var writer = new JsonWriter<byte>();
            writer.WriteUInt64(value);
            var output = writer.ToByteArray();

            var reader = new JsonReader<byte>(output);
            var deserialized = reader.ReadUInt64();
            Assert.Equal(value, deserialized);
        }

        [Fact]
        public void PrimitiveWrapperUtf16()
        {
            var value = Fixture.Create<ulong>();
            var writer = new JsonWriter<char>();
            writer.WriteUInt64(value);
            var output = writer.ToString();

            var reader = new JsonReader<char>(output);
            var deserialized = reader.ReadUInt64();
            Assert.Equal(value, deserialized);
        }
    }
    public class UInt64ListTests : ListTestBase<ulong>
    {
    }

    public class UInt64ArrayTests : ArrayTestBase<ulong>
    {
    }
    public class NullableSingleListTests : NullableListTestBase<float>
    {
    }

    public class NullableSingleArrayTests : NullableArrayTestBase<float>
    {
    }
    public partial class SingleTests : StructTestBase<float>
    {
        [Fact]
        public void PrimitiveWrapperUtf8()
        {
            var value = Fixture.Create<float>();
            var writer = new JsonWriter<byte>();
            writer.WriteSingle(value);
            var output = writer.ToByteArray();

            var reader = new JsonReader<byte>(output);
            var deserialized = reader.ReadSingle();
            Assert.Equal(value, deserialized);
        }

        [Fact]
        public void PrimitiveWrapperUtf16()
        {
            var value = Fixture.Create<float>();
            var writer = new JsonWriter<char>();
            writer.WriteSingle(value);
            var output = writer.ToString();

            var reader = new JsonReader<char>(output);
            var deserialized = reader.ReadSingle();
            Assert.Equal(value, deserialized);
        }
    }
    public class SingleListTests : ListTestBase<float>
    {
    }

    public class SingleArrayTests : ArrayTestBase<float>
    {
    }
    public class NullableDoubleListTests : NullableListTestBase<double>
    {
    }

    public class NullableDoubleArrayTests : NullableArrayTestBase<double>
    {
    }
    public partial class DoubleTests : StructTestBase<double>
    {
        [Fact]
        public void PrimitiveWrapperUtf8()
        {
            var value = Fixture.Create<double>();
            var writer = new JsonWriter<byte>();
            writer.WriteDouble(value);
            var output = writer.ToByteArray();

            var reader = new JsonReader<byte>(output);
            var deserialized = reader.ReadDouble();
            Assert.Equal(value, deserialized);
        }

        [Fact]
        public void PrimitiveWrapperUtf16()
        {
            var value = Fixture.Create<double>();
            var writer = new JsonWriter<char>();
            writer.WriteDouble(value);
            var output = writer.ToString();

            var reader = new JsonReader<char>(output);
            var deserialized = reader.ReadDouble();
            Assert.Equal(value, deserialized);
        }
    }
    public class DoubleListTests : ListTestBase<double>
    {
    }

    public class DoubleArrayTests : ArrayTestBase<double>
    {
    }
    public class NullableDecimalListTests : NullableListTestBase<decimal>
    {
    }

    public class NullableDecimalArrayTests : NullableArrayTestBase<decimal>
    {
    }
    public partial class DecimalTests : StructTestBase<decimal>
    {
        [Fact]
        public void PrimitiveWrapperUtf8()
        {
            var value = Fixture.Create<decimal>();
            var writer = new JsonWriter<byte>();
            writer.WriteDecimal(value);
            var output = writer.ToByteArray();

            var reader = new JsonReader<byte>(output);
            var deserialized = reader.ReadDecimal();
            Assert.Equal(value, deserialized);
        }

        [Fact]
        public void PrimitiveWrapperUtf16()
        {
            var value = Fixture.Create<decimal>();
            var writer = new JsonWriter<char>();
            writer.WriteDecimal(value);
            var output = writer.ToString();

            var reader = new JsonReader<char>(output);
            var deserialized = reader.ReadDecimal();
            Assert.Equal(value, deserialized);
        }
    }
    public class DecimalListTests : ListTestBase<decimal>
    {
    }

    public class DecimalArrayTests : ArrayTestBase<decimal>
    {
    }
    public class NullableBooleanListTests : NullableListTestBase<bool>
    {
    }

    public class NullableBooleanArrayTests : NullableArrayTestBase<bool>
    {
    }
    public class BooleanTests : StructTestBase<bool>
    {
        [Fact]
        public void PrimitiveWrapperUtf8()
        {
            var value = Fixture.Create<bool>();
            var writer = new JsonWriter<byte>();
            writer.WriteBoolean(value);
            var output = writer.ToByteArray();

            var reader = new JsonReader<byte>(output);
            var deserialized = reader.ReadBoolean();
            Assert.Equal(value, deserialized);
        }

        [Fact]
        public void PrimitiveWrapperUtf16()
        {
            var value = Fixture.Create<bool>();
            var writer = new JsonWriter<char>();
            writer.WriteBoolean(value);
            var output = writer.ToString();

            var reader = new JsonReader<char>(output);
            var deserialized = reader.ReadBoolean();
            Assert.Equal(value, deserialized);
        }
    }
    public partial class BooleanListTests : ListTestBase<bool>
    {
    }

    public class BooleanArrayTests : ArrayTestBase<bool>
    {
    }
    public class NullableCharListTests : NullableListTestBase<char>
    {
    }

    public class NullableCharArrayTests : NullableArrayTestBase<char>
    {
    }
    public class CharTests : StructTestBase<char>
    {
        [Theory]
        [InlineData(char.MinValue)]
        [InlineData(char.MaxValue)]
        public void SerializeDeserializeMinMaxUtf8(char input)
        {
            var serialized = JsonSerializer.Generic.Utf8.Serialize(input);
            var deserialized = JsonSerializer.Generic.Utf8.Deserialize<char>(serialized);
            Assert.Equal(input, deserialized);
        }

        [Theory]
        [InlineData(char.MinValue)]
        [InlineData(char.MaxValue)]
        public void SerializeDeserializeMinMaxUtf16(char input)
        {
            var serialized = JsonSerializer.Generic.Utf16.Serialize(input);
            var deserialized = JsonSerializer.Generic.Utf16.Deserialize<char>(serialized);
            Assert.Equal(input, deserialized);
        }

        [Fact]
        public void PrimitiveWrapperUtf8()
        {
            var value = Fixture.Create<char>();
            var writer = new JsonWriter<byte>();
            writer.WriteChar(value);
            var output = writer.ToByteArray();

            var reader = new JsonReader<byte>(output);
            var deserialized = reader.ReadChar();
            Assert.Equal(value, deserialized);
        }

        [Fact]
        public void PrimitiveWrapperUtf16()
        {
            var value = Fixture.Create<char>();
            var writer = new JsonWriter<char>();
            writer.WriteChar(value);
            var output = writer.ToString();

            var reader = new JsonReader<char>(output);
            var deserialized = reader.ReadChar();
            Assert.Equal(value, deserialized);
        }
    }
    public class CharListTests : ListTestBase<char>
    {
    }

    public partial class CharArrayTests : ArrayTestBase<char>
    {
    }
    public class NullableDateTimeListTests : NullableListTestBase<DateTime>
    {
    }

    public class NullableDateTimeArrayTests : NullableArrayTestBase<DateTime>
    {
    }
    public class DateTimeTests : StructTestBase<DateTime>
    {
        [Fact]
        public void PrimitiveWrapperUtf8()
        {
            var value = Fixture.Create<DateTime>();
            var writer = new JsonWriter<byte>();
            writer.WriteDateTime(value);
            var output = writer.ToByteArray();

            var reader = new JsonReader<byte>(output);
            var deserialized = reader.ReadDateTime();
            Assert.Equal(value, deserialized);
        }

        [Fact]
        public void PrimitiveWrapperUtf16()
        {
            var value = Fixture.Create<DateTime>();
            var writer = new JsonWriter<char>();
            writer.WriteDateTime(value);
            var output = writer.ToString();

            var reader = new JsonReader<char>(output);
            var deserialized = reader.ReadDateTime();
            Assert.Equal(value, deserialized);
        }

        [Fact]
        public void EscapedUtf8()
        {
            var value = Fixture.Create<DateTime>();
            var writer = new JsonWriter<byte>();
            writer.WriteDateTime(value);
            var output = writer.ToByteArray();
            output = EscapeMore(output);
            var reader = new JsonReader<byte>(output);
            var deserialized = reader.ReadDateTime();
            Assert.Equal(value, deserialized);
        }

        [Fact]
        public void EscapedUtf16()
        {
            var value = Fixture.Create<DateTime>();
            var writer = new JsonWriter<char>();
            writer.WriteDateTime(value);
            var output = writer.ToString();
            output = EscapeMore(output);
            var reader = new JsonReader<char>(output);
            var deserialized = reader.ReadDateTime();
            Assert.Equal(value, deserialized);
        }
    }
    public class DateTimeListTests : ListTestBase<DateTime>
    {
    }

    public class DateTimeArrayTests : ArrayTestBase<DateTime>
    {
    }
    public class NullableDateTimeOffsetListTests : NullableListTestBase<DateTimeOffset>
    {
    }

    public class NullableDateTimeOffsetArrayTests : NullableArrayTestBase<DateTimeOffset>
    {
    }
    public class DateTimeOffsetTests : StructTestBase<DateTimeOffset>
    {
        [Fact]
        public void PrimitiveWrapperUtf8()
        {
            var value = Fixture.Create<DateTimeOffset>();
            var writer = new JsonWriter<byte>();
            writer.WriteDateTimeOffset(value);
            var output = writer.ToByteArray();

            var reader = new JsonReader<byte>(output);
            var deserialized = reader.ReadDateTimeOffset();
            Assert.Equal(value, deserialized);
        }

        [Fact]
        public void PrimitiveWrapperUtf16()
        {
            var value = Fixture.Create<DateTimeOffset>();
            var writer = new JsonWriter<char>();
            writer.WriteDateTimeOffset(value);
            var output = writer.ToString();

            var reader = new JsonReader<char>(output);
            var deserialized = reader.ReadDateTimeOffset();
            Assert.Equal(value, deserialized);
        }

        [Fact]
        public void EscapedUtf8()
        {
            var value = Fixture.Create<DateTimeOffset>();
            var writer = new JsonWriter<byte>();
            writer.WriteDateTimeOffset(value);
            var output = writer.ToByteArray();
            output = EscapeMore(output);
            var reader = new JsonReader<byte>(output);
            var deserialized = reader.ReadDateTimeOffset();
            Assert.Equal(value, deserialized);
        }

        [Fact]
        public void EscapedUtf16()
        {
            var value = Fixture.Create<DateTimeOffset>();
            var writer = new JsonWriter<char>();
            writer.WriteDateTimeOffset(value);
            var output = writer.ToString();
            output = EscapeMore(output);
            var reader = new JsonReader<char>(output);
            var deserialized = reader.ReadDateTimeOffset();
            Assert.Equal(value, deserialized);
        }
    }
    public class DateTimeOffsetListTests : ListTestBase<DateTimeOffset>
    {
    }

    public class DateTimeOffsetArrayTests : ArrayTestBase<DateTimeOffset>
    {
    }
    public class NullableTimeSpanListTests : NullableListTestBase<TimeSpan>
    {
    }

    public class NullableTimeSpanArrayTests : NullableArrayTestBase<TimeSpan>
    {
    }
    public partial class TimeSpanTests : StructTestBase<TimeSpan>
    {
        [Fact]
        public void PrimitiveWrapperUtf8()
        {
            var value = Fixture.Create<TimeSpan>();
            var writer = new JsonWriter<byte>();
            writer.WriteTimeSpan(value);
            var output = writer.ToByteArray();

            var reader = new JsonReader<byte>(output);
            var deserialized = reader.ReadTimeSpan();
            Assert.Equal(value, deserialized);
        }

        [Fact]
        public void PrimitiveWrapperUtf16()
        {
            var value = Fixture.Create<TimeSpan>();
            var writer = new JsonWriter<char>();
            writer.WriteTimeSpan(value);
            var output = writer.ToString();

            var reader = new JsonReader<char>(output);
            var deserialized = reader.ReadTimeSpan();
            Assert.Equal(value, deserialized);
        }

        [Fact]
        public void EscapedUtf8()
        {
            var value = Fixture.Create<TimeSpan>();
            var writer = new JsonWriter<byte>();
            writer.WriteTimeSpan(value);
            var output = writer.ToByteArray();
            output = EscapeMore(output);
            var reader = new JsonReader<byte>(output);
            var deserialized = reader.ReadTimeSpan();
            Assert.Equal(value, deserialized);
        }

        [Fact]
        public void EscapedUtf16()
        {
            var value = Fixture.Create<TimeSpan>();
            var writer = new JsonWriter<char>();
            writer.WriteTimeSpan(value);
            var output = writer.ToString();
            output = EscapeMore(output);
            var reader = new JsonReader<char>(output);
            var deserialized = reader.ReadTimeSpan();
            Assert.Equal(value, deserialized);
        }
    }
    public class TimeSpanListTests : ListTestBase<TimeSpan>
    {
    }

    public class TimeSpanArrayTests : ArrayTestBase<TimeSpan>
    {
    }
    public class NullableDateOnlyListTests : NullableListTestBase<DateOnly>
    {
    }

    public class NullableDateOnlyArrayTests : NullableArrayTestBase<DateOnly>
    {
    }
    public class DateOnlyTests : StructTestBase<DateOnly>
    {
        [Fact]
        public void PrimitiveWrapperUtf8()
        {
            var value = Fixture.Create<DateOnly>();
            var writer = new JsonWriter<byte>();
            writer.WriteDateOnly(value);
            var output = writer.ToByteArray();

            var reader = new JsonReader<byte>(output);
            var deserialized = reader.ReadDateOnly();
            Assert.Equal(value, deserialized);
        }

        [Fact]
        public void PrimitiveWrapperUtf16()
        {
            var value = Fixture.Create<DateOnly>();
            var writer = new JsonWriter<char>();
            writer.WriteDateOnly(value);
            var output = writer.ToString();

            var reader = new JsonReader<char>(output);
            var deserialized = reader.ReadDateOnly();
            Assert.Equal(value, deserialized);
        }

        [Fact]
        public void EscapedUtf8()
        {
            var value = Fixture.Create<DateOnly>();
            var writer = new JsonWriter<byte>();
            writer.WriteDateOnly(value);
            var output = writer.ToByteArray();
            output = EscapeMore(output);
            var reader = new JsonReader<byte>(output);
            var deserialized = reader.ReadDateOnly();
            Assert.Equal(value, deserialized);
        }

        [Fact]
        public void EscapedUtf16()
        {
            var value = Fixture.Create<DateOnly>();
            var writer = new JsonWriter<char>();
            writer.WriteDateOnly(value);
            var output = writer.ToString();
            output = EscapeMore(output);
            var reader = new JsonReader<char>(output);
            var deserialized = reader.ReadDateOnly();
            Assert.Equal(value, deserialized);
        }
    }
    public class DateOnlyListTests : ListTestBase<DateOnly>
    {
    }

    public class DateOnlyArrayTests : ArrayTestBase<DateOnly>
    {
    }
    public class NullableTimeOnlyListTests : NullableListTestBase<TimeOnly>
    {
    }

    public class NullableTimeOnlyArrayTests : NullableArrayTestBase<TimeOnly>
    {
    }
    public class TimeOnlyTests : StructTestBase<TimeOnly>
    {
        [Fact]
        public void PrimitiveWrapperUtf8()
        {
            var value = Fixture.Create<TimeOnly>();
            var writer = new JsonWriter<byte>();
            writer.WriteTimeOnly(value);
            var output = writer.ToByteArray();

            var reader = new JsonReader<byte>(output);
            var deserialized = reader.ReadTimeOnly();
            Assert.Equal(value, deserialized);
        }

        [Fact]
        public void PrimitiveWrapperUtf16()
        {
            var value = Fixture.Create<TimeOnly>();
            var writer = new JsonWriter<char>();
            writer.WriteTimeOnly(value);
            var output = writer.ToString();

            var reader = new JsonReader<char>(output);
            var deserialized = reader.ReadTimeOnly();
            Assert.Equal(value, deserialized);
        }

        [Fact]
        public void EscapedUtf8()
        {
            var value = Fixture.Create<TimeOnly>();
            var writer = new JsonWriter<byte>();
            writer.WriteTimeOnly(value);
            var output = writer.ToByteArray();
            output = EscapeMore(output);
            var reader = new JsonReader<byte>(output);
            var deserialized = reader.ReadTimeOnly();
            Assert.Equal(value, deserialized);
        }

        [Fact]
        public void EscapedUtf16()
        {
            var value = Fixture.Create<TimeOnly>();
            var writer = new JsonWriter<char>();
            writer.WriteTimeOnly(value);
            var output = writer.ToString();
            output = EscapeMore(output);
            var reader = new JsonReader<char>(output);
            var deserialized = reader.ReadTimeOnly();
            Assert.Equal(value, deserialized);
        }
    }
    public class TimeOnlyListTests : ListTestBase<TimeOnly>
    {
    }

    public class TimeOnlyArrayTests : ArrayTestBase<TimeOnly>
    {
    }
    public class NullableGuidListTests : NullableListTestBase<Guid>
    {
    }

    public class NullableGuidArrayTests : NullableArrayTestBase<Guid>
    {
    }
    public class GuidTests : StructTestBase<Guid>
    {
        [Fact]
        public void PrimitiveWrapperUtf8()
        {
            var value = Fixture.Create<Guid>();
            var writer = new JsonWriter<byte>();
            writer.WriteGuid(value);
            var output = writer.ToByteArray();

            var reader = new JsonReader<byte>(output);
            var deserialized = reader.ReadGuid();
            Assert.Equal(value, deserialized);
        }

        [Fact]
        public void PrimitiveWrapperUtf16()
        {
            var value = Fixture.Create<Guid>();
            var writer = new JsonWriter<char>();
            writer.WriteGuid(value);
            var output = writer.ToString();

            var reader = new JsonReader<char>(output);
            var deserialized = reader.ReadGuid();
            Assert.Equal(value, deserialized);
        }

        [Fact]
        public void EscapedUtf8()
        {
            var value = Fixture.Create<Guid>();
            var writer = new JsonWriter<byte>();
            writer.WriteGuid(value);
            var output = writer.ToByteArray();
            output = EscapeMore(output);
            var reader = new JsonReader<byte>(output);
            var deserialized = reader.ReadGuid();
            Assert.Equal(value, deserialized);
        }

        [Fact]
        public void EscapedUtf16()
        {
            var value = Fixture.Create<Guid>();
            var writer = new JsonWriter<char>();
            writer.WriteGuid(value);
            var output = writer.ToString();
            output = EscapeMore(output);
            var reader = new JsonReader<char>(output);
            var deserialized = reader.ReadGuid();
            Assert.Equal(value, deserialized);
        }
    }
    public class GuidListTests : ListTestBase<Guid>
    {
    }

    public class GuidArrayTests : ArrayTestBase<Guid>
    {
    }
    public partial class StringTests : ClassTestBase<string>
    {
        [Fact]
        public void PrimitiveWrapperUtf8()
        {
            var value = Fixture.Create<string>();
            var writer = new JsonWriter<byte>();
            writer.WriteString(value);
            var output = writer.ToByteArray();

            var reader = new JsonReader<byte>(output);
            var deserialized = reader.ReadString();
            Assert.Equal(value, deserialized);
        }

        [Fact]
        public void PrimitiveWrapperUtf16()
        {
            var value = Fixture.Create<string>();
            var writer = new JsonWriter<char>();
            writer.WriteString(value);
            var output = writer.ToString();

            var reader = new JsonReader<char>(output);
            var deserialized = reader.ReadString();
            Assert.Equal(value, deserialized);
        }
    }
    public class StringListTests : ListTestBase<string>
    {
    }

    public class StringArrayTests : ArrayTestBase<string>
    {
    }
    public class VersionTests : ClassTestBase<Version>
    {
        [Fact]
        public void PrimitiveWrapperUtf8()
        {
            var value = Fixture.Create<Version>();
            var writer = new JsonWriter<byte>();
            writer.WriteVersion(value);
            var output = writer.ToByteArray();

            var reader = new JsonReader<byte>(output);
            var deserialized = reader.ReadVersion();
            Assert.Equal(value, deserialized);
        }

        [Fact]
        public void PrimitiveWrapperUtf16()
        {
            var value = Fixture.Create<Version>();
            var writer = new JsonWriter<char>();
            writer.WriteVersion(value);
            var output = writer.ToString();

            var reader = new JsonReader<char>(output);
            var deserialized = reader.ReadVersion();
            Assert.Equal(value, deserialized);
        }
    }
    public partial class VersionListTests : ListTestBase<Version>
    {
    }

    public class VersionArrayTests : ArrayTestBase<Version>
    {
    }
    public class UriTests : ClassTestBase<Uri>
    {
        [Fact]
        public void PrimitiveWrapperUtf8()
        {
            var value = Fixture.Create<Uri>();
            var writer = new JsonWriter<byte>();
            writer.WriteUri(value);
            var output = writer.ToByteArray();

            var reader = new JsonReader<byte>(output);
            var deserialized = reader.ReadUri();
            Assert.Equal(value, deserialized);
        }

        [Fact]
        public void PrimitiveWrapperUtf16()
        {
            var value = Fixture.Create<Uri>();
            var writer = new JsonWriter<char>();
            writer.WriteUri(value);
            var output = writer.ToString();

            var reader = new JsonReader<char>(output);
            var deserialized = reader.ReadUri();
            Assert.Equal(value, deserialized);
        }
    }
    public partial class UriListTests : ListTestBase<Uri>
    {
    }

    public class UriArrayTests : ArrayTestBase<Uri>
    {
    }
}