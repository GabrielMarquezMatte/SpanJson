using System;
// Autogenerated
// ReSharper disable BuiltInTypeReferenceStyle
namespace SpanJson.Formatters.Dynamic
{
    public partial class SpanJsonDynamicNumber<TSymbol> : SpanJsonDynamic<TSymbol> where TSymbol : struct
    {
        public static explicit operator sbyte(SpanJsonDynamicNumber<TSymbol> input)
        {
            if (DynamicConverter.TryConvertTo(typeof(sbyte), input.Symbols, out var value))
            {
                return (sbyte) value;
            }
            throw new InvalidCastException();
        }
        public static explicit operator short(SpanJsonDynamicNumber<TSymbol> input)
        {
            if (DynamicConverter.TryConvertTo(typeof(short), input.Symbols, out var value))
            {
                return (short) value;
            }
            throw new InvalidCastException();
        }
        public static explicit operator int(SpanJsonDynamicNumber<TSymbol> input)
        {
            if (DynamicConverter.TryConvertTo(typeof(int), input.Symbols, out var value))
            {
                return (int) value;
            }
            throw new InvalidCastException();
        }
        public static explicit operator long(SpanJsonDynamicNumber<TSymbol> input)
        {
            if (DynamicConverter.TryConvertTo(typeof(long), input.Symbols, out var value))
            {
                return (long) value;
            }
            throw new InvalidCastException();
        }
        public static explicit operator byte(SpanJsonDynamicNumber<TSymbol> input)
        {
            if (DynamicConverter.TryConvertTo(typeof(byte), input.Symbols, out var value))
            {
                return (byte) value;
            }
            throw new InvalidCastException();
        }
        public static explicit operator ushort(SpanJsonDynamicNumber<TSymbol> input)
        {
            if (DynamicConverter.TryConvertTo(typeof(ushort), input.Symbols, out var value))
            {
                return (ushort) value;
            }
            throw new InvalidCastException();
        }
        public static explicit operator uint(SpanJsonDynamicNumber<TSymbol> input)
        {
            if (DynamicConverter.TryConvertTo(typeof(uint), input.Symbols, out var value))
            {
                return (uint) value;
            }
            throw new InvalidCastException();
        }
        public static explicit operator ulong(SpanJsonDynamicNumber<TSymbol> input)
        {
            if (DynamicConverter.TryConvertTo(typeof(ulong), input.Symbols, out var value))
            {
                return (ulong) value;
            }
            throw new InvalidCastException();
        }
        public static explicit operator float(SpanJsonDynamicNumber<TSymbol> input)
        {
            if (DynamicConverter.TryConvertTo(typeof(float), input.Symbols, out var value))
            {
                return (float) value;
            }
            throw new InvalidCastException();
        }
        public static explicit operator double(SpanJsonDynamicNumber<TSymbol> input)
        {
            if (DynamicConverter.TryConvertTo(typeof(double), input.Symbols, out var value))
            {
                return (double) value;
            }
            throw new InvalidCastException();
        }
        public static explicit operator decimal(SpanJsonDynamicNumber<TSymbol> input)
        {
            if (DynamicConverter.TryConvertTo(typeof(decimal), input.Symbols, out var value))
            {
                return (decimal) value;
            }
            throw new InvalidCastException();
        }
    }
}